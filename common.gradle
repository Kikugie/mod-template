apply plugin: "maven-publish"
apply plugin: "fabric-loom"
apply plugin: "com.replaymod.preprocess"
apply plugin: "me.fallenbreath.yamlang"
apply plugin: "me.modmuss50.mod-publish-plugin"

int mcVersion = project.mcVersion

repositories {
    maven { url "https://jitpack.io" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Curseforge"
                url = "https://www.cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Gradle Plugin Portal"
        url = "https://plugins.gradle.org/m2/"
    }
//	maven {
//		name = "TerraformersMC"
//		url "https://maven.terraformersmc.com/releases/"
//	}
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: "net.fabricmc", module: "fabric-loader"
}

dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // dependencies
//	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    // example module import
//  modImplementation fabricApi.module("fabric-command-api-${mcVersion > 11802 ? "v2" : "v1"}", project.fabric_api_version)

//	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

    // mixin extensions
//	include(modImplementation("me.fallenbreath:conditional-mixin:${project.conditiona_lmixin_version}"))
//	include(annotationProcessor(implementation("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}")))
}

String MIXIN_CONFIG_PATH = "${project.mod_id}.mixins.json"
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 11800) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

loom {
    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir "../../run"
        vmArgs "-Dmixin.debug.export=true"
    }
}

remapJar {
    remapperIsolation = true
}

sourceCompatibility = JAVA_COMPATIBILITY
targetCompatibility = JAVA_COMPATIBILITY

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name + "-" + project.mod_version + "+" + project.title_version

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    inputs.property "version", project.mod_version
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "minecraft_dependency", project.minecraft_dependency

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id"                  : project.mod_id,
                "name"                : project.mod_name,
                "version"             : project.mod_version,
                "minecraft_dependency": project.minecraft_dependency,
        ]
        expand valueMap
    }

	filesMatching(MIXIN_CONFIG_PATH) {
		expand "compatibility_level": "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}"
	}
}

yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = "assets/${project.mod_id}/lang"
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

java {
    withSourcesJar()
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    repositories {
        maven {
            name = "kikugieMaven"
            url = "https://maven.kikugie.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = "${project.maven_group}.${project.archives_base_name}"
            artifactId = project.mod_version
            version = project.title_version

            from components.java
        }
    }
}
